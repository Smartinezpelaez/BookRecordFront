@page "/Autor/UpdateAutor"
@using System.Net.Http.Json
@using System.Text.Json
@using BookRecord.WEB.DTOs;
@using BookRecord.WEB.Services;
@using BookRecord.WEB.Models;
@using System.Text
@using MudBlazor
@using Newtonsoft.Json;
@using MudBlazor.Extensions
@inject NavigationManager NavManager
@inject AutoresService autorServices

<h3>Actualizar Actor</h3>

@if (autores != null)
{
    <form @onsubmit="@(async () => await Submit())">

        <label for="autorId">Id de Autor:</label>
        <select id="autorId" name="autorId" @bind="autors.AutorId">
            @foreach (var autor in autores)
            {
                <option value="@autor.AutorId">@autor.AutorId</option>
                
            }
        </select>

        <label for="NombreCompleto">Nombre del Autor:</label>
        <select id="NombreCompleto" name="NombreCompleto" @bind="autors.NombreCompleto">
            @foreach (var autor in autores)
            {                
                <option value="@autor.NombreCompleto">@autor.NombreCompleto</option>
            }
        </select>

        <label for="fechaNacimiento">Fecha de Nacimiento:</label>
        <input id="fechaNacimiento" type="date" @bind="autors.FechaNacimiento">

        <label for="ciudadProcedencia">Ciudad de Procedencia:</label>
        <input id="ciudadProcedencia" type="text" @bind="autors.CiudadProcedencia">

        <label for="correoElectronico">Correo Electronico:</label>
        <input id="correoElectronico" type="text" @bind="autors.CorreoElectronico">

        <button type="submit">Actualizar Autor</button>
        <button type="button" onclick="@GoToIndex">Volver al índice</button>
    </form>
}
else
{
    <p>Cargando datos...</p>
}


@code {
    private List<AutorDTO> autores;
    AutorDTO autors = new();
    private int selectedAuthorId;

    private void GoToIndex()
    {
        NavManager.NavigateTo("Autor/GetAutor");
    }

    protected override async Task OnInitializedAsync()
    {
        // Obtener la lista completa de autores.
        autores = await autorServices.GetAuthors();
    }

    private async Task Submit()
    {
        try
        {
            if (autors != null)
            {
                autors = await autorServices.UpdateAuthor(autors.AutorId, autors);
                NavManager.NavigateTo("Autor/GetAutor");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al actualizar autor: {ex.Message}");
        }       
    }

}
